' Gambas class file

' Author Westwood JustLostintime
'Released Under:
'  GNU GENERAL Public LICENSE
'  Version 3, 29 June 2007
'  See project license file.

Fast Unsafe
Public MyCpu As CPU6502
Public Running As Boolean
Public MonitorList As Collection  ' format is [ HEXADDR:[start,end], HEXADDR:[start, end] ]

Property Read SingleStep As Boolean
Property BreakPoints As Boolean
Property StartAddress As Long
Property SetMemoryProtection As Boolean
Property Profiling As Boolean
Property ProfileSortOrder As Boolean
Property MemoryUpdates As Boolean

Event StatusInfo(Info As Cpustatus)
Event NextInst(Info As String)
Event Breakpoint(pc As Long)
Event MemMonitor(address As Long, memDump As String)
Event BinaryLoaded(address As Long, BinName As String, info As String)
Event AutoStart(address As Long, speed As Integer)

Public Devices As ScriptManager
Public Services As ScriptManager

Property Read Config As ComputerDef Use $Config
Property SpeedScaler As Long
Property Read CyclesPerSecond As Long
Property Read DevicePath As String Use $DevicePath

Public Sub Configure(Configuration As ComputerDef)

  Dim cDev As Class
  Dim sDevName As String
  Dim rw As Integer

  $Config = Configuration

  For Each device As Variant[] In $Config
    If $Config.key == "NOTE" Then Continue               ' you can put notes into the config
    Dim vname As String[] = Split($Config.key, ":")
    If Exist($DevicePath &/ vname[0] & ".dev") Then
      sDevName = vname[0] & ".dev"
      Try cDev = Devices(sDevName)
    Else If Exist($DevicePath &/ vname[0] & ".srv") Then
      sDevName = vname[0] & ".srv"
      Try cDev = Services(sDevName)
      Continue           ' this is a service class not a device so end processing
    Else
      Message.Error(("Computer Definition contains invalid Device name") & " : " & vname[0] & (" Not Device or Service"))
      Return
    Endif
    If Error Then
      Message.Error("COMP DEF :" & sDevName & " : " & (" Unable To start computer Error found In configuration \nSee Error display panel For details "), (" ok "))
      Return
    Endif
    If device[3] == "rw" Then
      rw = CPU6502.mem_rw
    Else If device[3] == "ro" Then
      rw = CPU6502.mem_read
    Else If Device[3] == "wo" Then
      rw = CPU6502.mem_write
    Else
      rw = CPU6502.mem_rw
    Endif

    Try MyCpu.AddMap(device[0], device[1], cDev, device[2], rw) ' specify if it is read write or rw
    If Error Then
      Message("Error processing Device initialization " & cDev.Name & " Initialization Skipped")
    Endif

  Next

  Try MyCpu.Reset()
  If Error Then
    Message.Warning(("Reset Failed ") & Error.text, ("Continue"))
  Endif

  If Configuration.AutoStartActive Then
    Raise AutoStart(Configuration.AutoStart, Configuration.speed)
  Endif

End

Public Sub _new()

  MyCpu = New CPU6502 As "A_CPU"
  MyCpu.SingleStep = True
  MyCpu.DisplayInstruction = True
  MyCpu.DisplayStatus = True
  Running = False
  $DevicePath = user.home &/ "6502/dev"

  MonitorList = New Collection(gb.ignorecase)
  Devices = New ScriptManager(True, $DevicePath)
  Services = New ScriptManager(True, $DevicePath)

End

Public Sub _free()

  MyCpu = Null

End

Public Sub Shutdown()

  Try MyCpu.Halt()

End

Public Sub SetBreakPoints(Breaks As String[])

  Dim BrkList As New Long[]

  For Each s As String In Breaks
    Try BrkList.Add(Eval("&H0" & Left(s, 4)))
    If Error Then
      Message.Error(("Bad Breakpoint address format : ") & s & ("\n Should be 4 hex digits\nBreak Points Not Set!"), ("Ok"))
      Return
    Endif
  Next
  BrkList.Sort()
  mycpu.BreakPointList = BrkList

End

Public Sub LoadMemory(BinFile As String)

  MyCpu.LoadMemory(BinFile)

End

Public Sub Reset()

  MyCpu.SingleStep = True
  MyCpu.ResetPending = True
  MyCpu.InteruptPending = True

End

Public Sub Nmi()

  MyCpu.NMIPending = True
  MyCpu.InteruptPending = True

End

Public Sub IRQ()

  MyCpu.IRQPending = True
  MyCpu.InteruptPending = True

End

Public Sub StatusOn()

  MyCpu.DisplayStatus = True

End

Public Sub StatusOff()

  MyCpu.DisplayStatus = False

End

Public Sub A_CPU_StatusInfo(info As Cpustatus)

  Raise StatusInfo(info)

End

Public Sub A_CPU_NextInst(info As String)

  DisplayMemory()                        ' update any memory monitor running
  Raise NextInst(Info)

End

Public Sub A_CPU_MemUpdated()

  DisplayMemory()                        ' update any memory monitor running

End

Public Sub A_CPU_BreakPoint(pc As Long)

  Raise Breakpoint(pc)

End

Public Sub A_CPU_BinaryLoaded(address As Long, BinName As String, info As String)

  Raise BinaryLoaded(Address, BinName, info)

End

Public Sub DisplayCurrentInst()

  MyCpu.DisplayCurrentInst()

End

Public Sub StopRun()

  MyCpu.SingleStep = True
  Running = False

End

Public Sub run()

  If Not Running Then
    Running = True
  Endif

  MyCpu.run()

End

Public Sub SetSingleStep()

  MyCpu.SingleStep = True

End

Public Sub UnsetSingleStep()

  MyCpu.SingleStep = False

End

Sub DisplayMemory()

  Dim dump As String

  For Each memloc As Long[] In MonitorList
    dump = DumpMem(memloc[0], memloc[1])
    Raise MemMonitor(memloc[0], dump)
  Next

End

Public Sub DumpMem(fromAdr As Long, toAdr As Long, Optional linelen As Integer = 15) As String

  Dim result As String = ""
  Dim j As Integer
  Dim AsChrs As String = ""
  Dim TotLen As Long = ToAdr - fromAdr + 1

  If lineLen > TotLen Then LineLen = TotLen

  For i As Long = FromAdr To ToAdr Step linelen
    result &= Hex(i, 4) & " "
    AsChrs = ""
    For j As Integer = 0 To LineLen - 1
      If i + j > &h0ffff Then Break
      Dim Val As Byte = MyCpu.Peek(i + j)
      Result &= Hex(Val, 2) & " "
      Dim chrs As String = Chr(val)
      If IsAscii(chrs) And If IsPunct(chrs) Or IsLetter(chrs) Or IsNumber(chrs) Then
        AsChrs &= chrs
      Else
        AsChrs &= "."
      Endif
    Next
    result &= " " & AsChrs & "\n"
  Next
  Return result

End

Public Sub Trace(value As Boolean)

  MyCpu.DisplayInstruction = value

End

Public Sub TraceInfo() As String

  If MyCpu.DisplayInstruction Then Return MyCpu.LastTraceInstruction
  Return ""

End

Private Function SingleStep_Read() As Boolean

  Return MyCpu.SingleStep

End

Private Function SpeedScaler_Read() As Long

  Return MyCpu.$SpeedScaler

End

Private Sub SpeedScaler_Write(Value As Long)

  MyCpu.SpeedScaler = value

End

Private Function CyclesPerSecond_Read() As Long

  Return MyCpu.CyclesPerSecond

End

Private Function BreakPoints_Read() As Boolean

  Return MyCpu.BreakPoints

End

Private Sub BreakPoints_Write(Value As Boolean)

  MyCpu.BreakPoints = value

End

Private Function StartAddress_Read() As Long

  Return MyCpu.pc

End

Private Sub StartAddress_Write(Value As Long)

  MyCpu.Pc = value

End

Private Function SetMemoryProtection_Read() As Boolean

  Return MyCpu.ChkBadMemAccess

End

Private Sub SetMemoryProtection_Write(Value As Boolean)

  mycpu.ChkBadMemAccess = value

End

Private Function Profiling_Read() As Boolean

  Return MyCpu.Profiling

End

Private Sub Profiling_Write(Value As Boolean)

  MyCpu.Profiling = Value

End

Public Function ProfileInfo(Optional startAddress As Integer = -1, length As Integer = 0) As String[]

  Return MyCpu.ProfileInfo(startAddress, length)

End

Private Function ProfileSortOrder_Read() As Boolean

  Return MyCpu.ProfileSortOrder

End

Private Sub ProfileSortOrder_Write(Value As Boolean)

  MyCpu.ProfileSortOrder = Value

End

Public Sub ProfileReset()

  MyCpu.ProfileReset()

End

Private Function MemoryUpdates_Read() As Boolean

  Return MyCpu.DisplayMemory

End

Private Sub MemoryUpdates_Write(Value As Boolean)

  MyCpu.DisplayMemory = value

End
