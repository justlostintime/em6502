' Gambas class file

' Author Westwood JustLostintime
'Released Under:
'  GNU GENERAL Public LICENSE
'  Version 3, 29 June 2007
'  See project license file.

'Profiling for instructs based upon clock cycles
'this makes the execution very slow but return valid cycle usage info
'It prints out a dissasembled listing with counts for each address accessed

Fast Unsafe

profile As Collection
UserCpu As CPU6502

Public Sub _new(TheCpu As CPU6502)

  profile = New Collection
  profile.default = CPointer(0)     'use pointers as it allows us an unsigned value of 8 bytes
  UserCpu = TheCpu

End

Public Sub reset()

  profile.clear()

End

Public Sub count(address As Long, cycles As Integer)

  profile[Hex(address, 4)] += cycles

End

Public Sub report(Optional start_address As Long = -1, prog_length As Integer = 0, SortOrder As Boolean = False) As String[]

  Dim Result As New String[]
  Dim pc_counter As Long = 0

  If Start_address >= 0 Then
    For pc_counter = start_address To start_address + Prog_length - 1
      If profile.Exist(Hex(pc_counter, 4)) Then
        Result.Add(Subst("&1 : &2", fmtptrval(profile[Hex(pc_counter, 4)]), Disassembler.Inst(UserCpu, pc_counter, True)))
      Endif
    Next
  Else
    Dim addrlist As String[] = profile.keys
    If SortOrder Then
      addrlist.sort()
    Else
      Dim CntValues As New String[addrlist.count]
      For i As Integer = 0 To addrlist.Max
        CntValues[i] = Hex(profile[addrlist[i]], 12) & ":" & addrlist[i]
      Next
      Cntvalues.sort(gb.Descent)
      addrList = New String[]
      For i = 0 To CntValues.max
        addrlist.Add(Split(CntValues[i], ":")[1])
      Next

    Endif
    For Each pc_index As String In addrList
      pc_counter = Eval("&h0" & pc_index)
      Result.Add(Subst("&1 : &2", fmtptrval(profile[pc_index]), Disassembler.Inst(UserCpu, pc_counter, True)))
    Next
  Endif

  Return Result

End

Sub fmtPtrVal(value As Pointer) As String

  Dim Counter As String = Space(12) & Hex(value)

  Return Right(Counter, 12)

End
