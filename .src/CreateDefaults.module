' Gambas module file

' Author Westwood JustLostintime
'Released Under:
'  GNU GENERAL Public LICENSE
'  Version 3, 29 June 2007
'  See project license file.

Public Sub _call()

  With FMain

    If Not Exist(.AsmComputerDefinitions) Then
      Try Shell.MkDir(.AsmComputerDefinitions)
    Endif

    Dim Comp As New ComputerDef
    Comp.Name = "Default"
    Comp.Speed = 999
    Comp.AutoStart = &h0200
    Comp.AutoStartActive = True
    Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "mytb.bin", "rw"]
    Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin", "ro"]
    Comp["TTYSIM"] = [&h0E000, 16, "Concurrent Tiny Basic running with CTMON65 monitor", "rw"]
    Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3", "rw"]
    Comp["IrqTimer"] = [&h0E020, 5, "1000", "rw"]
    Comp["HaltButton"] = [0, 0, "Quit Button", "na"]
    Comp["ShowMhz"] = [0, 0, "3000", "na"]
    Comp.Description = "Default\n Concurrent tiny basic, Can be used as template"

    If Not Exist(.AsmComputerDefinitions &/ "Default") Then
      Comp.Save(.AsmComputerDefinitions)
    Else
      Comp.merge(.AsmComputerDefinitions)
    Endif

    Comp = New ComputerDef
    Comp.Name = "TwinScreen"
    Comp.Speed = 999
    Comp.AutoStart = &h0200
    Comp.AutoStartActive = True
    Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin", "ro"]
    Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "mytb.bin", "rw"]
    Comp["TTYSIM"] = [&h0E000, 16, "Concurrent Tiny Basic running with CTMON65 monitor", "rw"]
    Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3", "rw"]
    Comp["HaltButton"] = [0, 0, "Quit Button", "na"]
    Comp["ShowMhz"] = [0, 0, "3000", "na"]
    Comp["TTYSIM:1"] = [&h0E020, 16, "Tiny Basic Debug Console", "rw"]
    Comp["IrqTimer"] = [&h0E030, 5, "1000", "rw"]
    Comp.Description = "Twin Screen\nThis machine has two terminals. the primary is used to run tinybasic.\nThe secondary is the output from the Tinybasic trace system"
    If Not Exist(.AsmComputerDefinitions &/ "TwinScreen") Then
      Comp.Save(.AsmComputerDefinitions)
    Else
      Comp.merge(.AsmComputerDefinitions)
    Endif

    Comp = New ComputerDef
    Comp.Name = "CTMON2Rams"
    Comp.Speed = 999
    Comp.AutoStart = &h0200
    Comp.AutoStartActive = True
    Comp["RamMemory"] = [&h0000, &h00200, "", "rw"]
    Comp["RamMemory:1"] = [&h0200, &h0DE00, .AsmBinaryDirectory &/ "mytb.bin", "rw"]
    Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin", "ro"]
    Comp["TTYSIM"] = [&h0E000, 16, "CTMON2Ram Concurrent Tiny Basic running with CTMON65 monitor", "rw"]
    Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3", "rw"]
    Comp["IrqTimer"] = [&h0E020, 5, "1000", "rw"]
    Comp["HaltButton"] = [0, 0, "Quit Button", "na"]
    Comp.Description = "CTMON2Rams\nThis is an example of using independent ram segments in a machine"
    If Not Exist(.AsmComputerDefinitions &/ "CTMON2Rams") Then
      Comp.Save(.AsmComputerDefinitions)
    Else
      Comp.merge(.AsmComputerDefinitions)
    Endif

    Comp = New ComputerDef
    Comp.Name = "CTMONMMU"
    Comp.Speed = 999
    Comp.AutoStart = &h0200
    Comp.AutoStartActive = True
    Comp["RamMemory"] = [&h0000, &h0200, "", "rw"]
    Comp["MMU"] = [&h0200, &h0DE00, "&h0E030,20;" & .AsmBinaryDirectory &/ "mytb.bin", "rw"]
    Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin", "ro"]
    Comp["TTYSIM"] = [&h0E000, 16, "CTMONMMU and Concurrent Tiny Basic running with CTMON65 monitor", "rw"]
    Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3", "rw"]
    Comp["IrqTimer"] = [&h0E020, 5, "1000", "rw"]
    Comp["HaltButton"] = [0, 0, "Quit Button", "na"]
    Comp.Description = "CTMONMMU\nThis machine demonstrates the use of an mmu in the ram space"
    If Not Exist(.AsmComputerDefinitions &/ "CTMONMMU") Then
      Comp.Save(.AsmComputerDefinitions)
    Else
      Comp.merge(.AsmComputerDefinitions)
    Endif

    Comp = New ComputerDef
    Comp.Name = "CTMON65"
    Comp.Speed = 999
    Comp.AutoStart = -1
    Comp.AutoStartActive = True
    Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "mytb.bin", "rw"]
    Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin", "ro"]
    Comp["TTYSIM"] = [&h0E000, 16, "CTMON65 Running with Concurrent Basic Loaded  at $0200", "rw"]
    Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3", "rw"]
    Comp["IrqTimer"] = [&h0E020, 5, "1000", "rw"]
    Comp["ResetButton"] = [0, 0, "Reset button", "na"]
    Comp["HaltButton"] = [0, 0, "Quit Button", "na"]
    Comp.Description = "CTMON65\nthis machine loads tinybasic and ctmon65, starts at ctmon prompt\nstart tinbasic with a ' j 0200 ' from monitor"
    If Not Exist(.AsmComputerDefinitions &/ "CTMON65") Then
      Comp.Save(.AsmComputerDefinitions)
    Else
      Comp.merge(.AsmComputerDefinitions)
    Endif

    Comp = New ComputerDef
    Comp.Name = "CTMONTIMER"
    Comp.Speed = 999
    Comp.AutoStart = &h0200
    Comp.AutoStartActive = True
    Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "useirq.bin", "rw"]
    Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin", "ro"]
    Comp["TTYSIM"] = [&h0E000, 16, "CTMONTIMER CTMON65 Running with Timer at $E020", "rw"]
    Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3", "rw"]
    Comp["IrqTimer"] = [&h0E020, 5, "1000", "rw"]
    Comp["CycleTimer"] = [&h0E030, 5, "5000", "rw"]
    Comp["ResetButton"] = [0, 0, "Reset button", "na"]
    Comp["HaltButton"] = [0, 0, "Quit Button", "na"]
    Comp["NMIButton"] = [0, 0, "NMI Button", "na"]
    Comp["IrqButton"] = [0, 0, "IRQ Button", "na"]
    Comp["ShowMhz"] = [0, 0, "3000", "na"]
    Comp.Description = "CTMONTIMER\nDemonstrates the two types of timers available\nIrq Timer Based on realtime clock\nCycleTimer based on the clock ticks"
    If Not Exist(.AsmComputerDefinitions &/ "CTMONTIMER") Then
      Comp.Save(.AsmComputerDefinitions)
    Else
      Comp.merge(.AsmComputerDefinitions)
    Endif

    Comp = New ComputerDef
    Comp.Name = "C-Example"
    Comp.Speed = 999
    Comp.AutoStart = &H0200
    Comp.AutoStartActive = True
    Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "hello.raw", "rw"]
    Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin", "ro"]
    Comp["TTYSIM"] = [&h0E000, 16, "cc65 c program hello.c running with CTMON65 monitor", "rw"]
    Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3", "rw"]
    Comp["IrqTimer"] = [&h0E020, 5, "1000", "rw"]
    Comp["HaltButton"] = [0, 0, "Quit Button", "na"]
    Comp["ShowMhz"] = [0, 0, "3000", "na"]
    Comp.Description = "C-Example\nThis is a machine that runs a simple C program created with cc65. The ctmon clib is included as part of this project"
    If Not Exist(.AsmComputerDefinitions &/ "C-Example") Then
      Comp.Save(.AsmComputerDefinitions)
    Else
      Comp.merge(.AsmComputerDefinitions)
    Endif

    Comp = New ComputerDef
    Comp.Name = "console"
    Comp.Speed = 999
    Comp.AutoStart = -1                         ' Force a system reset, enter the monitor/6502 reset vector
    Comp.AutoStartActive = True
    Comp["KeyboardRdr"] = [0, 0, "#Service", "na"]    ' This is a service class used by one of the devices
    Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "mytb.bin", "rw"]
    Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin", "ro"]
    Comp["Console"] = [&h0E000, 16, "Concurrent TinyBasic and ctmon65 on the console only\n\rF2:Quit Emulator F3:RESET CPU F4:NMI", "rw"]
    Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3", "rw"]
    Comp["IrqTimer"] = [&h0E020, 5, "1000", "rw"]
    Comp["NOTE"] = [0, 0, "NOTES: \n All services Should be declared before they are used by a Device or other service", "na"]
    Comp.Description = "console\nThis machine can only be run from the shell prompt : em6502 -c console. Tiny basic will run in the terminal session"
    If Not Exist(.AsmComputerDefinitions &/ "console") Then
      Comp.Save(.AsmComputerDefinitions)
    Else
      Comp.merge(.AsmComputerDefinitions)
    Endif

    Comp = New ComputerDef
    Comp.Name = "badge6502"
    Comp.Speed = 999
    Comp.AutoStart = -1                         ' Force a system reset, enter the monitor/6502 reset vector
    Comp.AutoStartActive = True
    Comp["KeyboardRdr"] = [0, 0, "#Service", "na"]    ' This is a service class used by one of the devices
    Comp["RamMemory"] = [&h0000, &h08000, "", "rw"]   ' Default to the monitor program
    Comp["RomMemory"] = [&h08000, &h08000, .AsmBinaryDirectory &/ "Badge32k.bin", "ro"]
    Comp["HexDisplay"] = [&h08000, &h08000, "BadgeOS on the console only\n\rF2:Quit Emulator F3:RESET CPU F4:NMI", "wo"]
    Comp.Description = "badge6502\nEmulates the Badge created for VCF-west 40th aniversary\nThis will only run in console mode in a terminal  emulation. From the Bash Shell :\nem6502 -c badge6502"
    If Not Exist(.AsmComputerDefinitions &/ "badge6502") Then
      Comp.Save(.AsmComputerDefinitions)
    Else
      Comp.merge(.AsmComputerDefinitions)
    Endif

    If Not Exist(.AsmComputerDefinitions &/ "tinybasic") Then
      Comp = New ComputerDef
      Comp.Name = "tinybasic"
      Comp.Speed = 999
      Comp.AutoStart = &H0200
      Comp.AutoStartActive = True
      Comp["KeyboardRdr"] = [0, 0, "#Service", "na"]    ' This is a service class used by one of the devices
      Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "mytb.bin", "rw"]
      Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin", "ro"]
      Comp["Console"] = [&h0E000, 16, "Concurrent TinyBasic running in the console only\n\rF2:Quit Emulator F3:RESET CPU F4:NMI", "rw"]
      Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3", "rw"]
      Comp["IrqTimer"] = [&h0E020, 5, "1000", "rw"]
      Comp["NOTE"] = [0, 0, "NOTES: \n All services Should be declared before they are used by a Device or other service", "na"]
      Comp.Description = "tinybasic\nthis is an interactive console version of tinybasic Tasks/Advanced, only runs in a terminal emulation form the shell prompt\nem6502 -c tinybasic"
      Comp.Save(.AsmComputerDefinitions)
    Else
      Comp.merge(.AsmComputerDefinitions)
    Endif

    If Not Exist(.AsmComputerDefinitions &/ "MasterMytb") Then
      Comp = New ComputerDef
      Comp.Name = "MasterMytb"
      Comp.Speed = 999
      Comp.AutoStart = &h0200
      Comp.AutoStartActive = True
      Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "mytbm.bin", "rw"]
      Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin", "ro"]
      Comp["TTYSIM"] = [&h0E000, 16, "Master Tiny Basic running with CTMON65 monitor", "rw"]
      Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3", "rw"]
      Comp["HaltButton"] = [0, 0, "Quit Button", "na"]
      Comp["ShowMhz"] = [0, 0, "3000", "na"]
      Comp.Description = "MasterMytb\nThis runs the original Tiny Basic by Bob!"
      Comp.Save(.AsmComputerDefinitions)
    Else
      Comp.merge(.AsmComputerDefinitions)
    Endif

    If Not Exist(.AsmComputerDefinitions &/ "tinybasicm") Then
      Comp = New ComputerDef
      Comp.Name = "tinybasicm"
      Comp.Speed = 999
      Comp.AutoStart = &H0200
      Comp.AutoStartActive = True
      Comp["KeyboardRdr"] = [0, 0, "#Service", "na"]    ' This is a service class used by one of the devices
      Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "mytbm.bin", "rw"]
      Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin", "ro"]
      Comp["Console"] = [&h0E000, 16, "Master TinyBasic running in the console only\n\rF2:Quit Emulator F3:RESET CPU F4:NMI", "rw"]
      Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3", "rw"]
      Comp["NOTE"] = [0, 0, "NOTES: \n All services Should be declared before they are used by a Device or other service", "na"]
      Comp.Description = "tinybasicm\nThis runs the original Tiny Basic by Bob!, but inside the terminal : em6502 -c tinybasicm"
      Comp.Save(.AsmComputerDefinitions)
    Else
      Comp.merge(.AsmComputerDefinitions)
    Endif

    copyDirectory("dev")
    copyDirectory("asm")
    copyDirectory("cc65")
    copyDirectory("lst")
    copyDirectory("sym")
    copyDirectory("map")
    copyDirectory("bin")
    copyDirectory("drives")
    copyDirectory("doc")

  End With

Catch
  Error ("Create Defaults Error: "); Error.text;; Error.where

End

Sub copyDirectory(path As String, Optional topath As String = "")

  If topath = "" Then
    topath = User.home &/ "6502" &/ path
  Endif

  If Not Exist(toPath) Then
    If FMain.Verbose Then Error "" & ("Create Default :");; toPath;; "From";; path
    Try Shell.MkDir(ToPath)
    If Error Then
      If FMain.Verbose Then Error "" & ("Unable to make directory ");; topath;; Error.text
      Return
    Endif
  Endif

  For Each s As String In Dir(path, "*", gb.directory)
    If FMain.Verbose Then Error "Copy SubDirectory : ";; path &/ s
    copyDirectory(path &/ s, ToPath &/ s)
  Next

  Dim SourceFile As String
  Dim DestFile As String

  For Each s As String In Dir(path, "*", gb.file)
    If Right(s, 1) = "~" Then Continue
    If Not IsDir(Path &/ s) And If Exist(ToPath &/ s) Then
      If FMain.Verbose Then Error "" & ("Compare Files ");; Quote(Path) &/ Quote(s);; "to";; Quote(ToPath &/ s)
      Try SourceFile = File.Load(Path &/ s)
      If Error Then
        If FMain.Verbose Then Error "" & ("Warning: Unable to read file for copy compare/copy ");; Quote(Path) &/ Quote(s)
        Continue
      Endif
      Try DestFile = File.Load(ToPath &/ s)
      If Error Then
        If FMain.Verbose Then Error "" & ("Warning: Unable to read file for copy compare/copy ");; Quote(ToPath &/ s)
        Continue
      Endif
      If DestFile = SourceFile Then
        Continue
      Else
        Dim Response As Integer
        If CliInterface.UpdateDevNoPrompt = False Then
          Response = Message.warning(("An Update Is available for ") & s & " \n" & ("Would you like to update?"), ("Yes"), ("No"), ("Yes to All"))
        Else
          Response = 1
        Endif
        If CliInterface.UpdateDevNoPrompt Or If Response = 1 Or If Response = 3 Then
          If response = 3 Then CliInterface.UpdateDevNoPrompt = True
          If FMain.Verbose Then Error "" & ("Updating ");; s;; ("Current Version Dated ");; Stat(ToPath &/ s).time;; "," & (" Available Version Date ");; Stat(Path &/ s).time
          Kill ToPath &/ s
        Else
          Continue
        Endif
      Endif
    Endif

    If FMain.Verbose Then Error "" & ("Copy :");; s
    Try Copy path &/ s To ToPath &/ s
    If Error Then
      If FMain.Verbose Then Error "" & ("Unable to copy file ");; ToPath &/ s;; ("from");; path &/ s;; ":";; Error.text
    Endif
  Next

End
