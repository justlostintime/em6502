@include _number.regexp
@word /[A-Za-z_.][A-Za-z0-9_.]*/

documentation:
  from ;** to "\n"
  documentation.contents{Escape}:
    between here and "\n"
comment:
  from ; to "\n"
preprocessor:
  word processor include incbin incdir ifconst ifnconst endif if else eif endif
  preprocessor.escape{Preprocessor}:
    match "\\\n"
string:
  from " to "
  from ' to '
  escape:
    match /\\[fnrtv0'"\\]/
    match /\\c[A-Za-z]/
    match /\\x[0-9a-fA-F]{2}/
    match /\\u[0-9a-fA-F]{4}/
    match /\\u{[0-9a-fA-F]+}/

label:
  match /^[A-Za-z_.][A-Za-z_0-9]*[:]/
  match /^[A-Za-z_.][A-Za-z_0-9]*[\s\n]/
  between /j[sm][rp]\s*/ and /[\s\n]/
  between /b[

number:
  match /$(NUMBER)/
  match /$(NUMBER_HEXA)/
  match /$(NUMBER_BOOL)/

keyword:
  keyword(ignorecase) mac macro endm mexit set setstr repeat repend equ eqm subroutine org rorg rend seg align echo err list .org .force
  keyword(ignorecase,upper=firstletter) @opcodes.keyword
  symbol =

constant:
  keyword FALSE NULL TRUE

datatype:
  word dc ds dv hex res byte word long .byte .byte.b .word .word.w .long .long.w
  from /dc(.b|.w|.l)/
  from /dv(.b|.w|.l)/
  from /ds(.b|.w|.l)/

operator:
  symbol * / % + - >> << > >= < <= == != & ^ | && || ? [ ] , # { }

symbol:
  match /[A-Za-z_.][A-Za-z_.0-9]*/
