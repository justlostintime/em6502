' Gambas class file
'Released Under:
'  GNU GENERAL Public LICENSE
'  Version 3, 29 June 2007
'  See project license file.

'' Device TTY
'' This simulates a tty device that is Ansi complient
'' This opens a seperate window and allows the entry
'' of text to the cpu, it acts like a rs232 connected
'' device. This is configured to work with the
'' CTMON65 default rom, but may be used more generally

'fast unsafe

use "gb.form"
use "gb.form.terminal"

Public MemoryStart As Long = 0
Public MemoryEnd As Long = 0
Public MemoryLen As Long = 0
Public TermOut As TerminalView
Public TermLog as Button
Public TermMsg as TextBox
Public LastValue As Byte
Public Databuffer As Byte[]
Public EchoChar As Boolean = false
Public MyObs As Observer

Public isTask as boolean = false

Public $InPipe as string = ""
Public $OutPipe as string = ""

Public $RdPipe as file                  'Device read interface
Public $WrPipe as file                  'device Write interface

Public $tRdPipe as file                 'TaskRead interface
Public $tWrPipe as file                 'TaskWrite interface

Public TTYTermProcess as process
$LogFile as file

TTYNAME as string = "TTYForm"

Property read name as string use $name
Property Read hidden as boolean use $hidden = false
Property Status as byte use $Status = 0
Property UseIrqRX as boolean use $UseIrqRX = false
Property UseIrqTX as boolean use $UseIrqTX = false
Property Recording as boolean use $Recording = false

Logpath as string = user.home &/ "6502/log/"

RS232CONFIG as string[] = ["7bit,even parity,2 stop bits","7bit,odd parity,2 stop bits","7bit,even parity,1 stop bit","7bit,odd parity,1 stop bit",
                           "8bit,no parity,2 stop bits","8bit,no parity,1 stop bits","8bit,even parity,1 stop bit","8bit,odd parity,1 stop bits"]
RS232SYNC as string[] = ["sync divide by 1","sync divide by 16","sync divide by 64","ACIA MASTER RESET"]

TTYFORM As Form

'==================================================================================================
Public Sub _new(Start As Long, len As Long, StartMessage As string)

  TTYNAME &= Hex(Start, 6)
  $InPipe  = temp("I_"&TTYNAME)
  $OutPipe = temp("O_"&TTYNAME)

  'if not isTask then
      MemoryStart = Start
      MemoryEnd = Start+len-1
      MemoryLen = len
      DataBuffer = New Byte[]
      $name = "TTY"

      try $WrPipe = pipe $OutPipe for write
      if error then
        print "Error opening Output pipe Driver Side ";$OutPipe;"\n\r";
      else
        try $RdPipe = pipe $InPipe for read watch
        if error then
           print "Error opening Input pipe Driver Side ";$InPipe;"\n\r";
        endif
      endif
  'else
      try $tWrPipe = pipe $InPipe for write
      if error then
        print "Error opening Output pipe Task Side ";$INPipe;"\n\r";
      else
        try $tRdPipe = pipe $OutPipe for read watch
        if error then
           print "Error opening Output pipe Task Side ";$InPipe;"\n\r";
        endif
      endif

      openTTYWindow()

      Write #$WrPipe, "Ready at $" & Hex(Start, 6) & "\n\r"

      if len <> 16 then DEBUG ("TTY warning length should be 16 bytes Assuming 16 bytes")
      Debug "TTY Defined at : $"; Hex(Start, 6); " For length("; len; ") $"; Hex(len)

      if StartMessage <> "" then
          Write #$WrPipe, StartMessage & "\n\r"
      endif
  'endif
  Catch
    print "TTY Device error :" ; Error.text, Error.where;"\n\r";
End
'======================================================================================
Public sub halt()
   try close $WrPipe
   try close $RdPipe
   try close $tRdPipe
   try close $tWrPipe

   Debug "TTY Halted"
   TTYFORM.persistent = false
   TTYFORM.close()

end
'===================================================================================================
fast unsafe Public Sub _Put(Value As Byte, address as long)
  'print "TTY: Write Request Address=$";hex(address,4);;"With Data=$";hex(Value,2)
  if $hidden then
      TTYForm.Show()
      $hidden = false
  endif

'================================================================================
' Check for data being sent
'================================================================================
  if address = MemoryStart+1 then         'put the data
    LastValue = value
   ' if value = 10 or value = 13 then
   '   TermOut.Print("\n\r")
   ' else
      write #$WrPipe, Value as byte
      'TermOut.refresh()
   ' endif
'=================================================================================
' Else it must be config info
'=================================================================================
  else                                              'Write Status and config stuff
    'print "TTY : Config set ACIA : ";bin(Value,8)
    if (value and &h03) = &h03 then
      debug "TTY: ACIA Master reset detected"
      ' add cleanup code here if needed, reset does not change any config values
      return
    endif

    $Status = value                                 'set the config for this acia 6850
    if (value and &h80) = &h80 then
      $UseIrqRX = true
      debug "TTY: RX IRQ enabled"
    endif
    if (value and &h20) = &h20 then
      $UseIrqTX = true
      print "TTY: TX IRQ enabled"
    endif
      debug "TTY: Character Definition :";RS232CONFIG[(value and &h16) shr 2]
      debug "ACIA master:";RS232SYNC[value and &h03]
  endif
End
'
'================================================================================
fast unsafe Public Sub _get(address As Long) As Byte
 'print "TTY: Read Request Address=$";hex(address,4)
 if $hidden then
      TTYForm.Show()
      $hidden = false
  endif
 If address = MemoryStart + 1 Then                   'Then Read A byte
        if DataBuffer.count > 0 Then
           dim char as byte = DataBuffer.Pop()
           ' print "Got Char";;quote(chr(char));;"Value=";char
           Return char
        Else
           Return 0
        Endif
 else                                                ' Read The Status register
   dim status as byte = 2                            ' Can Always write
'  Status = bset(status,1)                           ' Can Always write something
   if DataBuffer.count > 0 then
'     debug "TTY : Byte Avaiable for read COUNT = "  'DataBuffer.count
      Status += 1                                    ' Set if something to read
'     Status = bset(status,0)                        ' set if something to be read
'  else
'     Status = bclr(status,0)
   endif
  endif

  return status

End
'==========================================================================
fast unsafe Public Sub KeyPress(bkeypress As Byte)

 if bkeypress = 127 then bKeyPress = 8
 DataBuffer.Add(bKeypress, 0)
 ' print "Keypress=";quote(chr(bKeyPress));;"VAlue=";bKeypress
 If EchoChar Then
    write #$WrPipe, Chr(bKeyPress)
    If bkeypress = 13 Then
      write #$WrPipe, "\n"
    Endif
 Endif

End
'====================================================================================
fast unsafe Public Sub _InRange(Address As Long) As Boolean

  If Address >= MemoryStart And Address <= MemoryEnd Then Return True
  Return False

End
'===================================================================================
Sub openTTYWindow()

  TTYForm = New Form As "MyTerminal"
  TTYFORM.title = " em6502 : TTY"& hex(MemoryStart,6)
  TTYForm.persistent = true
  TTYForm.arrangement = arrange.None

  TermLog = new Button(TTYForm) as "LogSet"
  TermLog.y = 5
  Termlog.x = 5
  Termlog.height = 25
  TermLog.Width  = 100
  TermLog.Text = "Start Recording"

  TermMsg  = new textbox(TTYForm)
  TermMsg.font = font["Arial,12,bold"]
  TermMsg.x = TermLog.x+TermLog.w + 5
  TermMsg.y = TermLog.y
  TermMsg.height = TermLog.Height

  TermMsg.Width = TTYForm.width - TermMsg.x - 5
  TermMsg.ReadOnly = true
  TermMsg.show()

  TermOut = New TerminalView(TTYForm) As "MyView"
  TermOut.font = font["Arial,12,bold"]
  TermOut.Enabled = True
  TermOut.ReadOnly = False
  TermOut.Width = TTYForm.width - 2
  TermOut.Height = TTYForm.Height - 29
  TermOut.Limit=3000

  TermOut.Y = 35
  TermOut.X = 1
  TermMsg  = new textbox(TTYForm)
  TermMsg.font = font["Arial,12,bold"]
  TermMsg.x = TermLog.x+TermLog.w + 5
  TermMsg.y = TermLog.y
  TermMsg.height = TermLog.Height
  TermMsg.Width = TTYForm.width - TermMsg.x - 5
  TermMsg.ReadOnly = true

  TTYFORM.show()

  try TermOut.ConnectTo($tWrPipe, $tRdPipe,me)
  if error then
    print "TTY Device Error at openTTYWindow;ConnectTo : ";error.text,error.where;"\n\r";
  endif

  Write #$WrPipe, "\e[32m"              ' set text color to green

  Catch
     print "TTY Device Error at openTTYWindow : ";error.text,error.where;"\n\r";

End
'=================================================================
Public Sub LogSet_click()
   if TermLog.Text = "Start Recording" then
      if not exist(logpath) then
        mkdir logpath
      endif
      dim LogFileName as string =  Logpath &/ TTYNAME &"_"& replace(str(now),"/","_") & ".log"
      try $LogFile = open LogFileName for write create
      if error then
          TermMsg.text = "Unable to open : "&LogFileName&" : "&error.text
      else
          TermLog.text = "Stop Recording"
          TermMsg.text = "Log File :"&LogFileName
          $Recording = true
      endif
   else
      TermLog.text = "Start Recording"
      $Recording = false
      TermMsg.text = "Log File Saved"
      try close $Logfile
   endif
   TermMsg.refresh()
end
'=================================================================
Public Sub MyTerminal_open()
  TTYForm.x = Settings[TTYNAME&"/Window/X", 100]
  TTYForm.y = Settings[TTYNAME&"/Window/Y", 100]
  TTYForm.h = Settings[TTYNAME&"/Window/H", 700]
  TTYForm.w = Settings[TTYNAME&"/Window/w", 600]

End
'===========================================================================
Public Sub MyTerminal_close()

  Settings[TTYNAME&"/Window/X"] = TTYForm.X
  Settings[TTYNAME&"/Window/Y"] = TTYForm.y
  Settings[TTYNAME&"/Window/H"] = TTYForm.h
  Settings[TTYNAME&"/Window/w"] = TTYForm.w
  Settings.Save()

End
'================================================================================
Public sub MyTerminal_resize()
    TermOut.h = TTYForm.h - 29
    TermOut.w = TTYForm.w - 2
    dim minw as integer = TTYForm.width - TermMsg.x - 5
    if minw < 30 then minw = 30
    TermMsg.Width = minw
end
'==========================================================================================
Public Sub MyTerminal_hide()
    $Hidden = true
END

'===========================================================================================
'Public Sub MyView_KeyPress()
' dim mykey as string = key.text
' print key.text;
' if isAscii(mykey)          'isletter(mykey) or isnumber(mykey) or ispunct(mykey) or mykey = "\n" or mykey = "\r" OR isSpace(mykey) Then
'      KeyPress(Asc(Key.text))
' Endif
'
'End
'===========================================================================================================
'' this function should be called when the pipe recieves data from the terminal keyboard
fast unsafe Public Sub file_read()

  Dim Buffer As string

  while lof($RdPipe)
    Read #$RdPipe, Buffer, 1
    Debug  asc(buffer);
    KeyPress(asc(buffer[0]))
    'error "Keypress value = ";asc(buffer[0])
  wend

  Catch
  print "TTY Device File Read : ";Error.text;"\n\r";

End
'===========================================================================================
'' This function is our preprocess filter
'' all we are doing here is to translate \n to \r\n
'' it recieves the data, and the length of the data
Public Sub PreProcess(ByRef data As Variant, ByRef len As Variant) As Boolean
'
'  Debug "Process Called len = "; len
'  If len = 1 Then
'    Select Case data
'      Case "\r"
'        data = Replace(data, "\r", "\n\r")
'   End Select
'  Else
'    Data = Replace(data, "\n", "\r\n")
'  Endif
'
  'error "To display : ";data
 ' error len
 if $Recording then write #$LogFile ,Data
 Return True

End
